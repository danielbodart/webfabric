diff -r 1a4025b1442e build.xml
--- a/build.xml	Thu Oct 29 23:00:26 2009 +0000
+++ b/build.xml	Thu Nov 05 14:28:41 2009 +0000
@@ -74,7 +74,7 @@
 
     <target name="build" depends="clean, compile, test, package" description="build all"/>
 
-    <target name="server" depends="build" description="run web server">
+    <target name="server" description="run web server">
         <java classname="org.webfabric.jetty.RunWebServer" fork="true">
             <classpath>
                 <path refid="all.jars"/>
diff -r 1a4025b1442e build/lib/scala-compiler.jar
Binary file build/lib/scala-compiler.jar has changed
diff -r 1a4025b1442e lib/scala-library.jar
Binary file lib/scala-library.jar has changed
diff -r 1a4025b1442e src/org/webfabric/http/EtagResponseWrapper.scala
--- a/src/org/webfabric/http/EtagResponseWrapper.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/http/EtagResponseWrapper.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -1,14 +1,13 @@
 package org.webfabric.http
 
-import com.opensymphony.module.sitemesh.util.FastByteArrayOutputStream
-import java.io.{OutputStream, PrintWriter}
 import java.util.Date
 import javax.servlet.http.{HttpServletResponse, HttpServletResponseWrapper}
 import javax.servlet.ServletOutputStream
+import java.io.{ByteArrayOutputStream, OutputStream, PrintWriter}
 
 class EtagResponseWrapper(servletResponse: HttpServletResponse) extends HttpServletResponseWrapper(servletResponse){
   lazy val md5 = new MD5
-  lazy val buffer = new FastByteArrayOutputStream
+  lazy val buffer = new ByteArrayOutputStream
   lazy val wrapped: OutputStream = md5.wrap(buffer)
 
   lazy override val getOutputStream = new ServletOutputStream {
diff -r 1a4025b1442e src/org/webfabric/sitemesh/AutoDetectingServletPageLoader.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/webfabric/sitemesh/AutoDetectingServletPageLoader.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,23 @@
+package org.webfabric.sitemesh
+
+import javax.servlet.http.HttpServletResponse
+import javax.servlet.http.HttpServletRequest
+import org.webfabric.collections.List
+import javax.servlet.ServletConfig
+
+class AutoDetectingServletPageLoader(request: HttpServletRequest, response: HttpServletResponse, servletConfig: ServletConfig) extends PageLoader {
+  val providers = List(
+    (path: String) => { new v2.ServletPageLoader(request, response, servletConfig).load(path) },
+    (path: String) => { new v3.ServletPageLoader(request, response, servletConfig).load(path) }
+    )
+
+  def load(path: String): Option[PropertyMap] = {
+    providers.tryPick( provider => {
+        try {
+          provider(path)
+        } catch {
+          case _ => None
+        }
+    })
+  }
+}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/PropertyMap.scala
--- a/src/org/webfabric/sitemesh/PropertyMap.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/PropertyMap.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -1,5 +1,16 @@
 package org.webfabric.sitemesh
 
-import org.webfabric.collections.UnsupportedMap
+import org.webfabric.collections.{List,UnsupportedMap}
+import java.util.Collection
 
-trait PropertyMap extends UnsupportedMap[String, Any]
\ No newline at end of file
+class PropertyMap(property: Property) extends UnsupportedMap[String, Any] {
+  override def containsKey(key: Any) = property.hasChild(key.toString)
+
+  override def get(key: Any) = new PropertyMap(property.getChild(key.toString))
+
+  override def toString = property.getValue
+
+  override def values: Collection[Any] = {
+    List(property.getValue)
+  }
+}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/StringTemplateDecoratorServlet.scala
--- a/src/org/webfabric/sitemesh/StringTemplateDecoratorServlet.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/StringTemplateDecoratorServlet.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -46,7 +46,7 @@
   }
 
   def getPageMap(request: HttpServletRequest, response: HttpServletResponse):PageMap = {
-    val loaders = new PageLoaders(new UrlPageLoader, new v2.ServletPageLoader(request, response, getServletConfig))
+    val loaders = new PageLoaders(new UrlPageLoader, new AutoDetectingServletPageLoader(request, response, getServletConfig))
     new PageMap(loaders)
   }
 }
diff -r 1a4025b1442e src/org/webfabric/sitemesh/TreeProperty.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/webfabric/sitemesh/TreeProperty.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,22 @@
+package org.webfabric.sitemesh
+
+import java.lang.String
+
+class TreeProperty(name:String, var value: String) extends Property {
+  def this(name:String) = this (name, null)
+
+  val children = new java.util.HashMap[String, TreeProperty]
+
+  def getValue = value
+
+  def setValue(v:String):Unit = value = v
+
+  def getChild(name: String) = {
+    if (!children.containsKey(name)) {
+      children.put(name, new TreeProperty(name))
+    }
+    children.get(name)
+  }
+
+  def hasChild(name: String) = children.containsKey(name)
+}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v2/HtmlParser.scala
--- a/src/org/webfabric/sitemesh/v2/HtmlParser.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/v2/HtmlParser.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -6,6 +6,6 @@
 
 trait HtmlParser extends HTMLPageParser with PropertyMapParser {
   def parse(html:String): PropertyMap = {
-    new PagePropertyMap(parse(html.toCharArray).asInstanceOf[HTMLPage])
+    new PropertyMap(PageAdapter.parse(parse(html.toCharArray).asInstanceOf[HTMLPage]))
   }
 }
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v2/PageAdapter.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/webfabric/sitemesh/v2/PageAdapter.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,26 @@
+package org.webfabric.sitemesh.v2
+
+import com.opensymphony.module.sitemesh.HTMLPage
+import java.util.{HashMap}
+import java.util.Map.Entry
+import org.webfabric.collections.Iterable
+import java.lang.String
+import org.webfabric.sitemesh.{TreeProperty}
+
+object PageAdapter {
+  def parse(page: HTMLPage):TreeProperty = {
+    val root = new TreeProperty("root")
+    root.getChild("head").asInstanceOf[TreeProperty].setValue(page.getHead)
+    root.getChild("body").asInstanceOf[TreeProperty].setValue(page.getBody)
+
+    Iterable.foreach(page.getProperties.entrySet, (e:Entry[_,_]) => {
+      val compositeKey:String = e.getKey.toString
+      var currentNode:TreeProperty = root
+      compositeKey.split("\\.").foreach(key => {
+        currentNode = currentNode.getChild(key).asInstanceOf[TreeProperty]
+      })
+      currentNode.setValue(e.getValue.toString)
+    })
+    root
+  }
+}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v2/PagePropertiesProvider.scala
--- a/src/org/webfabric/sitemesh/v2/PagePropertiesProvider.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/v2/PagePropertiesProvider.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -7,7 +7,7 @@
 class PagePropertiesProvider extends ContentProvider{
   def getContent(request: HttpServletRequest): Option[PropertyMap] = {
     request.getAttribute(RequestConstants.PAGE) match {
-      case page: HTMLPage => Some(new PagePropertyMap(page))
+      case page: HTMLPage => Some(new PropertyMap(PageAdapter.parse(page)))
       case _ => None
     }
   }
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v2/PagePropertyMap.scala
--- a/src/org/webfabric/sitemesh/v2/PagePropertyMap.scala	Thu Oct 29 23:00:26 2009 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,18 +0,0 @@
-package org.webfabric.sitemesh.v2
-
-import com.opensymphony.module.sitemesh.HTMLPage
-import org.webfabric.sitemesh.PropertyMap
-
-class PagePropertyMap(page: HTMLPage) extends PropertyMap {
-  override def containsKey(key: Any):Boolean = key match {
-    case "head" => true
-    case "body" => true
-    case _ => page.getProperties.containsKey(key)
-  }
-
-  override def get(key: Any):Any = key match {
-    case "head" => page.getHead
-    case "body" => page.getBody
-    case _ => page.getProperties.get(key)
-  }
-}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v2/ServletPageLoader.scala
--- a/src/org/webfabric/sitemesh/v2/ServletPageLoader.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/v2/ServletPageLoader.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -15,7 +15,7 @@
       val responseWrapper = new PageResponseWrapper(response, factory)
       responseWrapper.setContentType("text/html")
       dispatcher.include(new PageRequestWrapper(request), responseWrapper)
-      Some(new PagePropertyMap(responseWrapper.getPage.asInstanceOf[HTMLPage]))
+      Some(new PropertyMap(PageAdapter.parse(responseWrapper.getPage.asInstanceOf[HTMLPage])))
     } catch {
       case ex: ServletException => None
       case ex: IOException => None
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v3/ContentPropertiesProvider.scala
--- a/src/org/webfabric/sitemesh/v3/ContentPropertiesProvider.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/v3/ContentPropertiesProvider.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -8,7 +8,7 @@
 class ContentPropertiesProvider extends ContentProvider{
   def getContent(request: HttpServletRequest): Option[PropertyMap] = {
     request.getAttribute(WebAppContext.CONTENT_KEY) match {
-      case content: Content => Some(new ContentPropertyMap(content.getExtractedProperties))
+      case content: Content => Some(new PropertyMap(new ContentPropertyAdapter(content.getExtractedProperties)))
       case _ => None
     }
   }
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v3/ContentPropertyAdapter.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/webfabric/sitemesh/v3/ContentPropertyAdapter.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,13 @@
+package org.webfabric.sitemesh.v3
+
+import org.sitemesh.content.ContentProperty
+import java.lang.String
+import org.webfabric.sitemesh.Property
+
+class ContentPropertyAdapter(property:ContentProperty) extends Property{
+  def getValue = property.getValue
+
+  def getChild(name: String) = new ContentPropertyAdapter(property.getChild(name))
+
+  def hasChild(name: String) = property.hasChild(name)
+}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v3/ContentPropertyMap.scala
--- a/src/org/webfabric/sitemesh/v3/ContentPropertyMap.scala	Thu Oct 29 23:00:26 2009 +0000
+++ /dev/null	Thu Jan 01 00:00:00 1970 +0000
@@ -1,18 +0,0 @@
-package org.webfabric.sitemesh.v3
-
-import org.sitemesh.content.ContentProperty
-import java.util.{Collection}
-import org.webfabric.collections.{List}
-import org.webfabric.sitemesh.PropertyMap
-
-class ContentPropertyMap(property:ContentProperty) extends PropertyMap {
-  override def containsKey(key: Any) = property.hasChild(key.toString)
-
-  override def get(key: Any) = new ContentPropertyMap(property.getChild(key.toString))
-
-  override def toString = property.getValue
-
-  override def values:Collection[Any] = {
-    List(property.getValue)
-  }
-}
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v3/ContentPropertyMapParser.scala
--- a/src/org/webfabric/sitemesh/v3/ContentPropertyMapParser.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/src/org/webfabric/sitemesh/v3/ContentPropertyMapParser.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -1,13 +1,17 @@
 package org.webfabric.sitemesh.v3
 
-import org.webfabric.sitemesh.PropertyMapParser
 import org.sitemesh.content.tagrules.TagBasedContentProcessor
 import org.sitemesh.content.tagrules.html.{CoreHtmlTagRuleBundle, DivExtractingTagRuleBundle}
 import java.nio.CharBuffer
+import org.webfabric.sitemesh.{PropertyMap, PropertyMapParser}
 
 class ContentPropertyMapParser extends PropertyMapParser {
   def parse(html: String): org.webfabric.sitemesh.PropertyMap = {
+    parse(CharBuffer.wrap(html))
+  }
+
+  def parse(buffer: CharBuffer): org.webfabric.sitemesh.PropertyMap = {
     val contentProcessor = new TagBasedContentProcessor(new CoreHtmlTagRuleBundle(), new DivExtractingTagRuleBundle());
-    new ContentPropertyMap(contentProcessor.build(CharBuffer.wrap(html), null).getExtractedProperties)
+    new PropertyMap(new ContentPropertyAdapter(contentProcessor.build(buffer, null).getExtractedProperties))
   }
 }
\ No newline at end of file
diff -r 1a4025b1442e src/org/webfabric/sitemesh/v3/ServletPageLoader.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/org/webfabric/sitemesh/v3/ServletPageLoader.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,22 @@
+package org.webfabric.sitemesh.v3
+
+import java.io.IOException
+import javax.servlet.http.{HttpServletResponse, HttpServletRequest}
+import javax.servlet.{ServletException, ServletConfig}
+import org.webfabric.sitemesh.{PageLoader, PropertyMap}
+import org.sitemesh.webapp.contentfilter.{ResponseMetaData, BasicSelector, HttpServletResponseBuffer}
+
+class ServletPageLoader(request: HttpServletRequest, response: HttpServletResponse, servletConfig: ServletConfig) extends PageLoader {
+  def load(path: String): Option[PropertyMap] = {
+    try {
+      val dispatcher = request.getRequestDispatcher(path)
+      val responseWrapper = new HttpServletResponseBuffer(response, new ResponseMetaData, new BasicSelector)
+      responseWrapper.setContentType("text/html")
+      dispatcher.include(request, responseWrapper)
+      Some(new ContentPropertyMapParser().parse(responseWrapper.getBuffer))
+    } catch {
+      case ex: ServletException => None
+      case ex: IOException => None
+    }
+  }
+}
\ No newline at end of file
diff -r 1a4025b1442e test/org/webfabric/sitemesh/PageLoadersTest.scala
--- a/test/org/webfabric/sitemesh/PageLoadersTest.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/test/org/webfabric/sitemesh/PageLoadersTest.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -1,9 +1,7 @@
 package org.webfabric.sitemesh
 
-import com.opensymphony.module.sitemesh.parser.TokenizedHTMLPage
 import org.junit.{Test}
 import org.junit.Assert.{assertEquals, fail}
-import org.webfabric.sitemesh.v2.PagePropertyMap
 
 class PageLoadersTest {
   @Test
@@ -21,5 +19,5 @@
     }
   }
 
-  val page = new PagePropertyMap(new TokenizedHTMLPage(new Array[Char](0), null, null))
+  val page = new PropertyMap(null)
 }
\ No newline at end of file
diff -r 1a4025b1442e test/org/webfabric/sitemesh/Property.scala
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/test/org/webfabric/sitemesh/Property.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -0,0 +1,7 @@
+package org.webfabric.sitemesh
+
+trait Property {
+  def hasChild(name: String): Boolean;
+  def getChild(name: String): Property;
+  def getValue: String
+}
\ No newline at end of file
diff -r 1a4025b1442e test/org/webfabric/sitemesh/v2/CrossSiteRequestForgeryParserTest.scala
--- a/test/org/webfabric/sitemesh/v2/CrossSiteRequestForgeryParserTest.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/test/org/webfabric/sitemesh/v2/CrossSiteRequestForgeryParserTest.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -2,7 +2,7 @@
 
 import org.junit.Test
 import org.junit.Assert.assertEquals
-import org.webfabric.sitemesh.TokenProvider
+import org.webfabric.sitemesh.{PropertyMap, TokenProvider}
 
 class CrossSiteRequestForgeryParserTest {
   @Test
@@ -19,7 +19,7 @@
     val page = pageParser.parse(html);
 
     // verify
-    assertEquals(token, page.get("csrf.token:/blah"))
+    assertEquals(token, page.get("csrf").asInstanceOf[PropertyMap].get("token:/blah").toString)
   }
 
   @Test
@@ -37,6 +37,6 @@
 
     // verify
     val hiddenInput = "<input type=\"hidden\" name=\"csrf.token\" value=\"" + token + "\"/>"
-    assertEquals("<form method='post'>" + hiddenInput + "content</form>", page.get("body"));
+    assertEquals("<form method='post'>" + hiddenInput + "content</form>", page.get("body").toString);
   }
 }
\ No newline at end of file
diff -r 1a4025b1442e test/org/webfabric/sitemesh/v2/DivCapturingPageParserTest.scala
--- a/test/org/webfabric/sitemesh/v2/DivCapturingPageParserTest.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/test/org/webfabric/sitemesh/v2/DivCapturingPageParserTest.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -18,9 +18,9 @@
     var page:PropertyMap = pageParser.parse(html);
 
     // verify
-    assertEquals(body, page.get("body"));
-    assertEquals(outer, page.get("div.outer"));
-    assertEquals(inner, page.get("div.inner"));
+    assertEquals(body, page.get("body").toString);
+    assertEquals(outer, page.get("div").asInstanceOf[PropertyMap].get("outer").toString);
+    assertEquals(inner, page.get("div").asInstanceOf[PropertyMap].get("inner").toString);
   }
 
   @Test
@@ -33,7 +33,7 @@
     var page = pageParser.parse(html);
 
     // verify
-    assertEquals("<div id='target'>content</div>", page.get("body"));
+    assertEquals("<div id='target'>content</div>", page.get("body").toString);
   }
 
   @Test
@@ -46,6 +46,6 @@
     var page = pageParser.parse(html);
 
     // verify
-    assertEquals("content", page.get("div.target"));
+    assertEquals("content", page.get("div").asInstanceOf[PropertyMap].get("target").toString);
   }
 }
diff -r 1a4025b1442e test/org/webfabric/sitemesh/v3/ContentPropertyMapTest.scala
--- a/test/org/webfabric/sitemesh/v3/ContentPropertyMapTest.scala	Thu Oct 29 23:00:26 2009 +0000
+++ b/test/org/webfabric/sitemesh/v3/ContentPropertyMapTest.scala	Thu Nov 05 14:28:41 2009 +0000
@@ -13,7 +13,7 @@
   def changesValuesToBeValueSoThatStringTemplateWorksCorrectly(): Unit = {
     // setup
     val contentProperties = extractContentProperties("<html><head><title>foo</title></head></html>")
-    val map = new ContentPropertyMap(contentProperties)
+    val map = new PropertyMap(contentProperties)
 
     // execute & verify
     assertTrue(map.containsKey("title"))
@@ -27,16 +27,16 @@
   def supportsChildProperty(): Unit = {
     // setup
     val contentProperties = extractContentProperties("<html><head><title>foo</title></head></html>")
-    val map = new ContentPropertyMap(contentProperties)
+    val map = new PropertyMap(contentProperties)
 
     // execute & verify
     assertTrue(map.containsKey("title"))
     assertEquals(map.get("title").toString, "foo")
   }
 
-  def extractContentProperties(html: String): ContentProperty = {
+  def extractContentProperties(html: String): Property = {
     val contentProcessor = new TagBasedContentProcessor(new CoreHtmlTagRuleBundle(), new DivExtractingTagRuleBundle());
-    contentProcessor.build(CharBuffer.wrap(html), null).getExtractedProperties
+    new ContentPropertyAdapter(contentProcessor.build(CharBuffer.wrap(html), null).getExtractedProperties)
   }
 
 }
\ No newline at end of file
diff -r 1a4025b1442e web/decorators/div.st
--- a/web/decorators/div.st	Thu Oct 29 23:00:26 2009 +0000
+++ b/web/decorators/div.st	Thu Nov 05 14:28:41 2009 +0000
@@ -1,1 +1,1 @@
-$query.("id"):{id|$properties.({div.$id$})$}$
\ No newline at end of file
+$query.("id"):{id|$properties.div.(id)$}$
\ No newline at end of file
